
###################### TASK 1 #########################
def train_test_split(X, y):
    I = (X.shape[0]//3)*2
    X_train = X[:I, :]
    y_train = y[:I]
    X_val = X[I:,:]
    y_val = y[I:]
    return X_train, X_val, y_train, y_val

import numpy as np
def classifier(reps):
    from sklearn.preprocessing import StandardScaler
    from sklearn.linear_model import LogisticRegression
    model = LogisticRegression(solver='sag', random_state=None,  multi_class='multinomial', warm_start=False, max_iter = 2000)
    X = np.load(reps+"_features.npy")
    y = np.load(reps+"_phonemes.npy")
   
    X_train, X_val, y_train, y_val = train_test_split(X, y)
    
    scaler = StandardScaler()
    
    X_train = scaler.fit_transform(X_train)
    
    model.fit(X_train,y_train)
    X_val = scaler.transform(X_val)
    val_score = 1-model.score(X_val, y_val)
    
    W = np.load("test_"+reps+"_features.npy")
    W = scaler.transform(W)
    z = np.load("test_"+reps+"_phonemes.npy")
    
    test_error_rate = 1-model.score(W, z)
    global_error_rates[reps]= (val_score, test_error_rate)
    
    return(val_score, test_error_rate)

print(classifier())


################### TASK 2 #######################

def train_test_split(X, y):
    I = (X.shape[0]//3)*2
    X_train = X[:I, :]
    y_train = y[:I]
    X_val = X[I:,:]
    y_val = y[I:]
    return X_train, X_val, y_train, y_val

import numpy as np
def classifier(reps):
    from sklearn.preprocessing import StandardScaler
    from sklearn.linear_model import LogisticRegression
    model = LogisticRegression(solver='sag', random_state=None,  multi_class='multinomial', warm_start=False, max_iter = 2000)
    X = np.load(reps+"_features.npy")
    y = np.load(reps+"_phonemes.npy")
   
    X_train, X_val, y_train, y_val = train_test_split(X, y)
    
    scaler = StandardScaler()
    
    X_train = scaler.fit_transform(X_train)
    
    model.fit(X_train,y_train)
    X_val = scaler.transform(X_val)
    

    W = list_separated(reps)['original'][1]
    W = scaler.transform(W)
    z = list_separated(reps)['original'][0]
    ori_err = 1-model.score(W, z)
        
    W1 = list_separated(reps)['manipulated'][1]
    W1 = scaler.transform(W1)
    z1 = list_separated(reps)['manipulated'][0]
    mani_err = 1-model.score(W1, z1)
    
    return(ori_err, mani_err)
